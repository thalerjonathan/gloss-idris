This textfile reflects thoughts of porting gloss from Haskell to Idris

- no deriving of instances
	-> Eq implementation is not too difficult and trivial for even large sum types
	-> Ord for large sum types becomes impossible, resort to implementing at LT in all cases

- no map
	-> replaced by SortedMap, needed implementation of Eq and Ord (see no deriving of instances)

- style
	-> 2 spaces instead of 8space tabs
	-> do in same line as function name and arguments

- pure instead of return
	-> idris prefers the usage of pure over return (they do both the same but return is misnamed), compiler warns / thros error

- syntax
	-> no guards
		-> translate to cascading if-then-else,
		-> in one extreme case (depth of 10+) idris compiler hanged (i stoped the process after 1 min), i resorted to views
	-> : instead of :: in type, context and vice-versa for lists is quite anoying but I understand the motivation behind it (Brady says because types play such an important role in Idris, he only wants a single :)
	-> function/type A which is used by function/type B must be defined in the code-file before function/type B, which can be quite anoying at times - yes there is the keyword mutual which allows recursive dependencies, but I quite don't get the point why this is not the standard behaviour

	-> records have a bit different syntax, upon initialisation one cannot adress the fields directly as in haskell but relies on the correct ordering in the constructor which can be error prone with many arguments of same type

	-> no Float, replaced all by Double (atm i really don't care about this nuance)

- FFI
	-> returning a struct from c for loading a PNG is possible but nowhere described in documentation, with help of mailing list and the idris-dev code on github i was able to figure out how to do it
	-> straight-forward to create bindings for low level c libs
	-> opengl bindings: taken from gl-idris and extended manually (didn't have all functions/symbols from the OpenGL API Registry included)
	-> GLEW bindings: written by myself, inspired by glfw-idris
	-> GLFW bindings: written by myself, based on the haskell library glfw-b but made major changes to the API due to difference in callbacks
	-> GLUT support: gloss can be compiled with GLFW or GLUT being its backend, i scraped GLUT support because I couldn't be bothered to port the code for GLUT and provide low-level bindings for it as GLUT is very outdated and completely replaced by GLFW 
	-> there are good haskell libraries for both OpenGL and GLFW but porting these to idris would be too much work for me, so i decided to use FFI 
	-> followed the example of glfw-idris and gl-idris to write a Config file which needs to be included in the package as well otherwise dependencies would complain about missing symbols
	-> modifyIORef in FFI callback crashes: https://groups.google.com/forum/#!topic/idris-lang/kXVP1NAGBCY

- module system
	-> public export vs. export
	-> import as public ...
	-> results in a bit different behaviour than haskell but overall more or less the same

- package system
	-> works well enough for now

- use of dependent types / idris only features
	-> views instead of guards
	-> tuple size depends on input argument (in opengl bindings)
	-> use of Vect 

- strict semantics
	-> removed all bang patterns

- comments / documentation
	-> retained the original comments
	-> if arguments to functions were documented i did that as well in idris, naming the arguments in the type and refering to the name in the documentation with @

- compiling errors sometimes completely misleading
	-> compiler seems to get confused when there are types from haskell it doesnt like e.g. using [x] instead of List x

- performance
	-> ?